function DoClick1(go)
	print("click1 gameObject is " .. go.name)
end

function DoClick2(go)
	print("click2 gameObject is " .. go.name)
end

function AddClick1(listener)
	if listener.onClick then
		listener.onClick = listener.onClick + DoClick1
	else
		listener.onClick = DoClick1
	end
end

function AddClick2(listener)
	if listener.onClick then
		listener.onClick = listener.onClick + DoClick2
	else
		listener.onClick = DoClick2
	end
end

function SetClick1(listener)
	if listener.onClick then
		listener.onClick:Destroy()
	end

	listener.onClick = DoClick1
end

function RemoveClick1(listener)
	if listener.onClick then
		listener.onClick = listener.onClick - DoClick1
	else
		print("empty delegate")
	end
end

function RemoveClick2(listener)
	if listener.onClick then
		listener.onClick = listener.onClick - DoClick2
	else
		print("empty delegate")
	end
end

--测试重载问题
function TestOverride(listener)
	listener:SetOnFinished(TestEventListener.OnClick(DoClick1))
	listener:SetOnFinished(TestEventListener.VoidDelegate(DoClick2))
end

function TestEvent()
	print("this is a event")
end

function AddEvent(listener)
	listener.onClickEvent = listener.onClickEvent + TestEvent
end

function RemoveEvent(listener)
	listener.onClickEvent = listener.onClickEvent - TestEvent
end

local t = {name = "byself"}

function t:TestSelffunc()
	print("callback with self: " .. self.name)
end

function AddSelfClick(listener)
	if listener.onClick then
		listener.onClick = listener.onClick + TestEventListener.OnClick(t.TestSelffunc, t)
	else
		listener.onClick = TestEventListener.OnClick(t.TestSelffunc, t)
	end
end

function RemoveSelfClick(listener)
	if listener.onClick then
		listener.onClick = listener.onClick - TestEventListener.OnClick(t.TestSelffunc, t)
	else
		print("empty delegate")
	end
end

function print_dump(data, showMetatable, lastCount)
	if type(data) ~= "table" then
		--Value
		if type(data) == "string" then
			print('"', data, '"')
		else
			print(tostring(data))
		end
	else
		--Format
		local count = lastCount or 0
		count = count + 1
		print("{\n")
		--Metatable
		if showMetatable then
			for i = 1, count do
				print("\t")
			end
			local mt = getmetatable(data)
			print('"__metatable" = ')
			print_dump(mt, showMetatable, count) -- 如果不想看到元表的元表，可将showMetatable处填nil
			print(",\n") --如果不想在元表后加逗号，可以删除这里的逗号
		end
		--Key
		for key, value in pairs(data) do
			for i = 1, count do
				print("\t")
			end
			if type(key) == "string" then
				print('"', key, '" = ')
			elseif type(key) == "number" then
				print("[", key, "] = ")
			else
				print(tostring(key))
			end
			print_dump(value, showMetatable, count) -- 如果不想看到子table的元表，可将showMetatable处填nil
			print(",\n") --如果不想在table的每一个item后加逗号，可以删除这里的逗号
		end
		--Format
		for i = 1, lastCount or 0 do
			print("\t")
		end
		print("}")
	end
	--Format
	if not lastCount then
		print("\n")
	end
end

function CallOnClick(listener)
	if listener.onAct == nil then
		listener.onAct = function()
			print("Test")
		end
	end
	--print_dump(listener.onAct, "MSG")
	--local x = listener.onAct
	--x:Invoke()
	--print(System_Action_Event)
	--System_Action_Event.New(listener.onAct)
end
